#+TITLE: fifql - Stack-based Query Language for Clojure(script) Web APIs
#+AUTHOR: Benjamin Zaporzan
#+DATE: 2019-02-06
#+EMAIL: benzaporzan@gmail.com
#+LANGUAGE: en
#+OPTIONS: H:2 num:t toc:t \n:nil ::t |:t ^:t f:t tex:t

[[https://clojars.org/fifql][https://img.shields.io/clojars/v/fifql.svg]]

*fifql* is a query language consisting of [[https://github.com/benzap/fif][fif]], and an exposed web server
handler for querying a web server. It is meant to be a replacement for
[[https://graphql.org/][graphql]], while being more powerful and expressive.

*fifql* leverages the *fif* stack-machine as a query language, which
offers an easier medium of expressing data formatted in the EDN data
format. *fifql* works awesome with clojure and clojurescript
applications on both the server-side, and on the receiving client-side.

* Example

This example creates a new fifql server containing one custom word
function which returns an integer value plus 2. It also defines a word
variable 'server-details which is a fabricated name of the server we're querying.

#+BEGIN_SRC clojure

(ns fifql.example.server
  (:require

   ;; High-performance Web Server
   [org.httpkit.server :as httpkit]

   ;; Routing Library
   [compojure.core :refer [GET POST defroutes]]
   [compojure.route :as route]
   
   ;; Fifql Library
   [fifql.server :refer [create-ring-request-handler]]
   [fifql.core :as fifql]))


(def server-name "A fifql Example Server")
(def server-port 8080)


;; Create our stack machine, and define some word functions
(def stack-machine
  (-> (fifql/create-stack-machine)

      (fifql/set-word 'add2 (fifql/wrap-function 1 (fn [x] (+ 2 x)))
       :doc "(n -- n) Add 2 to the value"
       :group :fifql/example)

      (fifql/set-var 'server-details {:server-port server-port :server-name server-name}
       :doc "The server details"
       :group :fifql/example)))


;; Create our ring request handler to use with Httpkit
(def fifql-handler
  (create-ring-request-handler
   :prepare-stack-machine stack-machine))


;; Create our routes. The fifql ring handler supports both GET and POST requests
(defroutes app
  (GET "/fifql" req fifql-handler)
  (POST "/fifql" req fifql-handler)
  (route/not-found "<h1>Page not Found</h1>"))


;; Start the web server. Note that any server that supports ring
;; request handlers are supported.
(defn start
  []
  (httpkit/run-server #'app {:port server-port}))


(defn -main [& args]
  (start))

#+END_SRC

Querying the server via a ~curl~ command


#+BEGIN_SRC sh

# HTTP GET Examples

$ curl http://localhost/fifql?query=2,add2
{:input-string "2,add2", :stack (4), :stdout [], :stderr []}

$ curl http://localhost/fifql?query=server-details
{:input-string "server-details", :stack ({:server-port 8080, :server-name "A fifql Example Server"}), :stdout [], :stderr []}


# HTTP POST Examples

$ curl -d "2 2 +" -X POST http://localhost:8080/fifql -H "Accept: application/edn"
{:input-string "2 2 +", :stack (4), :stdout [], :stderr []}


$ curl -d "\"Hello World!\" println" -X POST http://localhost:8080/fifql -H "Accept: application/edn"
{:input-string "\"Hello World!\" println", :stack (), :stdout ["Hello World!\r\n"], :stderr []}

...
#+END_SRC
